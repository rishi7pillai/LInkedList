#include<bits/stdc++.h>
#define ll long long int
#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define endl "\n"
using namespace std;
class tree
{
     public:
       ll value;
       tree *left,*right;
     tree(ll data)
     {
         this->value=data;
         this->left=this->right=NULL;
     }
     auto insrt(ll data,auto root)
     {
         if(root==NULL)
            return new tree(data);
         if(data<root->value)
          root->left=insrt(data,root->left);
         else
          root->right=insrt(data,root->right);
        return root;
     }
     void inordr(auto root)
     {
         if(root==NULL)
            return;
         inordr(root->left);
         cout<<root->value<<" ";
         inordr(root->right);
     }
     auto level_order_traversal(auto root)
     {
         queue<tree *> q;
         q.push(root);
         while(!q.empty())
         {
             auto temp=q.front();
             q.pop();
             cout<<temp->value<<" ";
             if(temp->left)
                q.push(temp->left);
             if(temp->right)
                q.push(temp->right);
         }
     }
     auto left_view(auto root)
     {
         queue<tree *> q;
         q.push(root);
         while(!q.empty())
         {
             ll sz=q.size();
             for(ll i=1;i<=sz;i++)
             {
                auto temp=q.front();
                 q.pop();

                 if(i==sz)
                    cout<<temp->value<<" ";
             if(temp->left)
                q.push(temp->left);
             if(temp->right)
                q.push(temp->right);
             }
            
         }
     }
     auto top_view(auto root)
     {
         map<ll,ll> mp;
         queue<pair<tree *,ll>> q;
         q.push({root,0});
         while(!q.empty())
         {
             auto temp=q.front();
             q.pop();
             ll hd=temp.second;
             auto node=temp.first;
             if(mp.count(hd)==0)
                mp[hd]=node->value;
             if(node->left)
                q.push({node->left,hd-1});
             if(node->right)
                q.push({node->right,hd+1});
         }
         for(auto x:mp)
            cout<<x.second<<" ";
     }
     ll height_of_tree(auto root)
     {
         if(root==NULL)
           return 0;
         ll left=height_of_tree(root->left);
         ll right=height_of_tree(root->right);
         return 1+max(left,right);
     }
     tree *array_to_bst(ll *a,ll st,ll end)
     {
           if(st>end)
              return NULL;
           ll mid=(st+end)/2;
           tree *node=new tree(a[mid]);
           node->left=array_to_bst(a,st,mid-1);
           node->right=array_to_bst(a,mid+1,end);

           return node;
     }
     

};
int main()
{
    tree *root=NULL;
    ll n;cin>>n;
    ll i,a[n];
    for(i=0;i<n;i++) cin>>a[i];
    for(i=0;i<n;i++)
      root=root->insrt(a[i],root);
    root->inordr(root);
    cout<<endl;
    root->level_order_traversal(root);
    cout<<endl;
    root->left_view(root);
    cout<<endl;
    root->top_view(root);
    cout<<endl;
    ll k=root->height_of_tree(root);
    cout<<k<<endl;
    ll b[]={6,8,9,19,29};
    root=root->array_to_bst(b,0,4);
    cout<<endl;
    root->inordr(root);

    

   
    
    
}
